# collbaborator.net
RIYESH NATH AND WILLIAM WU

Big data project to help find users with similar interests and skills within 10 miles using MongoDB and Neo4j.

Structure of the program:

1) Querying for a specific user, attribute, organization, projects, interests, and skills will use MongoDB.
2) Querying for users with similar interests, similar skills, and organizations within 10 miles of each other will use Neo4j.

To create the database run:

"python generateDB.py users.csv organizations.csv projects.csv skills.csv interests.csv distances.csv"

To query the MongoDB run:

"python mongoQuery.py -u "Bob Dylan" -o "Burger King""

For more details on this script type in:

"python mongoQuery.py -h"

FOR NEO4J:
THIS DOES THE DATA QUERY BY ITSELF. 
THE PROGRAM ASKS FOR A USER-ID TO DO TASK 1 OF FINDING USERS BY SKILLS AND INTEREST
THERE ARE TWO QUERIES
1) WE TAKE IN ALL THE .CSV FILES AND FROM THEM WE MAKE A GRAPH AS WILL BE SHOWN IN A PICTURE (ATTACHED INSIDE THE ZIP FILE WHERE ALL DOCUMENTS AND CODES ARE IN)
-AFTER MAKING THE GRAPH, WE WILL QUERY IT AND PARSE THROUGH GRAPH TO GET THE VALUE WANTED
THE SKILLS AND INTERESTS ARE BOTH PRINTED IN DIFFERENT CHART BUT ARE LOCATED IN SAME FUNCTION
2) SECOND QUERY IS ON THE PROJECTS, WHERE WE FIND A RELATIONSHIP THAT IS REQUIRED USING THAT BASIC IDEA WE CREATE A PATTERN AND USE THAT TO FIND PEOPLE WHO HAVE WORKED IN SAME PROJECTS

IMPROVEMENT POSSIBLE:
THE QUERY CAN BE FASTER IF WE CAN TAG A VALUE WITH PRIORITY, IF A VALUE IS USED OR QUERIED A LOT, PERHAPS THERE SHOULD BE A WAY TO GET TO IT FAST.
FURTHERMORE WE CAN ALSO IMPROVE THIS DESIGN BY unifying CERTAIN QUERIES.
PERHAPS IF I HAVE TWO QUERIES OF PROJECT AND FIND USERS BASED ON SKILL_SETS, PERHAPS IF WE CAN UTILIZE THEM TOGETHER, IF WOULD BE MUCH FASTER. 
I USE TWO FUNCTIONS BUT IF I COULD FIND RELATIONSHIPS BASED OF PREVIOUS SEARCH, IT WOULD MAKE MY QUERY FASTER.
